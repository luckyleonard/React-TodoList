{"version":3,"sources":["TodoItem.js","TodoList.js","index.js"],"names":["TodoItem","props","handleClick","bind","nextProps","nextState","content","this","onClick","deleteItem","index","Component","defaultProps","test","TodoList","state","inputValue","list","show","handleInputChange","handleBtnClick","handleItemDelete","divToggle","htmlFor","id","className","value","onChange","ref","input","getTodoListItem","axios","get","then","alert","catch","map","item","key","setState","prevState","splice","ReactDOM","render","document","getElementById"],"mappings":"gRAGMA,E,YAEJ,WAAYC,GACX,IAAD,8BACE,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFrB,E,mFAKsBC,EAAUC,GAC9B,OAAGD,EAAUE,UAAYC,KAAKN,MAAMK,U,+BAO5B,IACAA,EAAYC,KAAKN,MAAjBK,QACR,OACE,wBAAIE,QAASD,KAAKL,aACfI,K,oCAKQ,IAAD,EACkBC,KAAKN,OACnCQ,EAFY,EACJA,YADI,EACQC,W,GA1BDC,aAqCvBX,EAASY,aAAe,CACtBC,KAAM,eAGOb,Q,iBCkEAc,G,wBAvGb,WAAYb,GAAO,IAAD,8BAChB,4CAAMA,KACDc,MAAQ,CACXC,WAAY,GACZC,KAAM,GACNC,MAAM,GAGR,EAAKC,kBAAoB,EAAKA,kBAAkBhB,KAAvB,gBACzB,EAAKiB,eAAiB,EAAKA,eAAejB,KAApB,gBACtB,EAAKkB,iBAAmB,EAAKA,iBAAiBlB,KAAtB,gBACxB,EAAKmB,UAAY,EAAKA,UAAUnB,KAAf,gBAXD,E,sEAeR,IAAD,OACP,OACE,kBAAC,WAAD,KACE,6BACE,2BAAOoB,QAAQ,aAAf,0BACA,2BACEC,GAAG,aACHC,UAAU,QACVC,MAAOnB,KAAKQ,MAAMC,WAElBW,SAAUpB,KAAKY,kBACfS,IAAK,SAACC,GAAW,EAAKA,MAAQA,KAEhC,4BAAQrB,QAASD,KAAKa,gBAAtB,iBAEF,4BACGb,KAAKuB,mBAER,yBAAKL,UAAWlB,KAAKQ,MAAMG,KAAO,OAAS,QAA3C,eAGA,4BAAQV,QAASD,KAAKe,WAAtB,a,0CASJS,IAAMC,IAAI,iBACPC,MAAK,WAAKC,MAAM,oBAChBC,OAAM,WAAKD,MAAM,mB,wCAGH,IAAD,OAChB,OAAO3B,KAAKQ,MAAME,KAAKmB,KAAI,SAACC,EAAK3B,GAC/B,OACE,kBAAC,WAAD,KAOE,kBAAC,EAAD,CACEJ,QAAS+B,EACT3B,MAAOA,EACP4B,IAAKD,EACL5B,WAAY,EAAKY,yB,0CAMzB,IAAMK,EAAQnB,KAAKsB,MAAMH,MACzBnB,KAAKgC,UAAS,iBAAO,CACnBvB,WAAYU,Q,uCAOdnB,KAAKgC,UAAS,SAACC,GAAD,MAAgB,CAC5BvB,KAAK,GAAD,mBAAMuB,EAAUvB,MAAhB,CAAsBuB,EAAUxB,aACpCA,WAAY,S,uCAKCN,GAGfH,KAAKgC,UAAS,SAACC,GACb,IAAMvB,EAAI,YAAOuB,EAAUvB,MAE3B,OADAA,EAAKwB,OAAO/B,EAAM,GACX,CAACO,WACP,iB,kCAGQ,IAAD,OACVV,KAAKgC,UAAS,iBAAO,CACnBrB,MAAM,EAAKH,MAAMG,a,GAnGAP,cCCvB+B,IAASC,OAAQ,kBAAE,EAAF,MAAiBC,SAASC,eAAe,W","file":"static/js/main.9d3b8513.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps,nextState) {\r\n    if(nextProps.content !== this.props.content) {\r\n      return true;\r\n    }else {\r\n      return false;\r\n    }\r\n  }//使用nextProps参数比对现有传入的值，当发生变化时候才进行重新渲染\r\n\r\n  render() {\r\n    const { content } = this.props;//解构赋值\r\n    return (\r\n      <li onClick={this.handleClick}>\r\n        {content}\r\n        {/* 接收并使用父组件传过来的值 */}\r\n      </li>)\r\n  }\r\n\r\n  handleClick() {\r\n    const { deleteItem, index } = this.props;\r\n    deleteItem(index);\r\n  }//使用父元素传过来的handleDeleteItem(deleteItem)方法，和index值\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  content: PropTypes.string,\r\n  deleteItem: PropTypes.func,\r\n  index: PropTypes.number\r\n  //PropTypes.oneOfType([Proptypes.number, PropTypes.string])\r\n}\r\nTodoItem.defaultProps = {\r\n  test: 'hello world'//设置一个默认值，防止父组件无法传值的情况\r\n}\r\n\r\nexport default TodoItem;","import React, { Component,Fragment } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport axios from 'axios';\r\nimport './TodoList.css';\r\nimport './style.css';\r\n\r\nclass TodoList extends Component {\r\n  constructor(props){\r\n    super(props);//引用Component构造函数实现继承\r\n    this.state = {\r\n      inputValue: '',\r\n      list: [],\r\n      show: true\r\n    };\r\n    //this.state是这个组件的数据,需要绑定在state下面\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleBtnClick = this.handleBtnClick.bind(this);\r\n    this.handleItemDelete = this.handleItemDelete.bind(this);\r\n    this.divToggle = this.divToggle.bind(this);\r\n    //优化绑定挪入constructor\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div> \r\n          <label htmlFor='inserArea'>请输入todo</label>\r\n          <input \r\n            id='insertArea'\r\n            className='input'\r\n            value={this.state.inputValue}\r\n            \r\n            onChange={this.handleInputChange}\r\n            ref={(input) => {this.input = input}}//ref相当于对应input Dom节点\r\n          />\r\n          <button onClick={this.handleBtnClick}>提交</button> \r\n        </div>\r\n        <ul>\r\n          {this.getTodoListItem()}\r\n        </ul>\r\n        <div className={this.state.show ? 'show' : 'hide'}>\r\n          Hello World\r\n        </div>\r\n        <button onClick={this.divToggle}>toggle</button>\r\n      </Fragment>\r\n    //  JSX中使用变量需要添加{}包裹变量\r\n    //  绑定webapi方法时候需要onChange,C大写 \r\n    //  需要使用bind绑定this指向\r\n    )\r\n  }\r\n\r\n  componentDidMount(){\r\n    axios.get('/api/todolist')\r\n      .then(()=>{alert('success axios')})\r\n      .catch(()=>{alert('fail axios')})\r\n  }\r\n\r\n  getTodoListItem() {\r\n    return this.state.list.map((item,index)=>{\r\n      return (\r\n        <Fragment>\r\n          {/* <li\r\n            // dangrouslySetInnerHTML={{__html: item}} \r\n            key={index}\r\n            onClick={this.handleItemDelete.bind(this,index)}\r\n            // 绑定删除操作，并传递index作为参数*\r\n          >{item}</li>) */}\r\n          <TodoItem \r\n            content={item} \r\n            index={index}\r\n            key={item}\r\n            deleteItem={this.handleItemDelete}//一定要绑定this\r\n            />\r\n        </Fragment>)\r\n    })\r\n  }\r\n  handleInputChange() {\r\n    const value = this.input.value;//替换e.target 因为添加了ref\r\n    this.setState(() => ({\r\n      inputValue: value\r\n    }))\r\n    //需要使用setState方式去改变属性的值\r\n    //函数参数从对象变为一个函数，为异步函数接收状态\r\n  }\r\n\r\n  handleBtnClick() {\r\n    this.setState((prevState) => ({\r\n      list: [...prevState.list, prevState.inputValue],//数组扩展运算符，对数组进行添加操作\r\n      inputValue: ''//并清空输入框内容\r\n    }))//返回state对象\r\n    //使用prevState避免修改掉现有的状态\r\n  }\r\n\r\n  handleItemDelete(index) {\r\n    //immutable\r\n    //state 不许我们做任何修改，需要拷贝出来做修改，再赋值，要不然会影响性能优化\r\n    this.setState((prevState) => {\r\n      const list = [...prevState.list];\r\n      list.splice(index,1);//将数组操作写入函数体内\r\n      return {list}//返回list 等同于{list：list}\r\n    }, () => {})//回调函数可用于执行ref相关的直接DOM节点操作\r\n  }\r\n\r\n  divToggle() {\r\n    this.setState(() => ({\r\n      show: this.state.show ? false : true\r\n    }))\r\n  }\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport TodoList from './TodoList'\n\nReactDOM.render( < TodoList / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}